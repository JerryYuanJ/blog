import{_ as a,c as i,o as n,ae as e}from"./chunks/framework.CLNW5JS9.js";const c=JSON.parse('{"title":"Watch","description":"","frontmatter":{"sidebarDepth":3},"headers":[],"relativePath":"docs/tools/webpack/watch.md","filePath":"docs/tools/webpack/watch.md"}'),t={name:"docs/tools/webpack/watch.md"};function h(p,s,l,k,r,d){return n(),i("div",null,s[0]||(s[0]=[e(`<h1 id="watch" tabindex="-1">Watch <a class="header-anchor" href="#watch" aria-label="Permalink to &quot;Watch&quot;">​</a></h1><p>webpack 可以监听文件的改动，并且重新编译。本节我们就来看看如何配置。</p><h2 id="开启文件监听" tabindex="-1">开启文件监听 <a class="header-anchor" href="#开启文件监听" aria-label="Permalink to &quot;开启文件监听&quot;">​</a></h2><p>要开启文件监听很简单：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  watch: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>上面的配置结果是，webpack 在初次打包后，会继续的监听文件的变化，一有修改就会重新编译打包。</p><p>值得注意的是，在 webpack-dev-server 和 webpack-dev-middleware 中 watch 是默认为 true 的。这也是我们配置 devServer 时，不需要配置 watch 的原因（但是你可以配置 devServer.watchOptions ）。</p><h2 id="配置监听选项" tabindex="-1">配置监听选项 <a class="header-anchor" href="#配置监听选项" aria-label="Permalink to &quot;配置监听选项&quot;">​</a></h2><p>webpack 提供了一个 watchOptions 配置项，可以让我们控制监听的一些行为。</p><h3 id="aggregatetimeout" tabindex="-1">aggregateTimeout <a class="header-anchor" href="#aggregatetimeout" aria-label="Permalink to &quot;aggregateTimeout&quot;">​</a></h3><p>它是一个数字类型的值。它表示在上一次构建后，等待多少毫秒去收集本次的更新，然后聚合到一次构建中。<strong>它的单位值是毫秒。</strong> 通俗的理解，就是前后两次构建的等待时间。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  watch: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  watchOptions: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    aggregateTimeout: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 表示每隔两秒构建一次（如果有文件修改的话）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="ignored" tabindex="-1">ignored <a class="header-anchor" href="#ignored" aria-label="Permalink to &quot;ignored&quot;">​</a></h3><p>忽略哪些文件的监听。一般为了性能需要，我们会忽略那些包含很多文件的目录，比如 node_modules。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  watch: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  watchOptions: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ignored: &#39;/node_modules/&#39;,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 正则形式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ignored: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;files/**/*.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node_modules/**&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 数组形式（使用 anymatch 模式匹配）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="poll" tabindex="-1">poll <a class="header-anchor" href="#poll" aria-label="Permalink to &quot;poll&quot;">​</a></h3><p>是否轮询。它为 true 的话表示开启轮询，为 false 的话表示关闭轮询，默认是 false。它也可以是一个数字，表示轮询的时间间隔。</p><p>如果监听模式不起作用的话，可以尝试一下这个选项。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  watch: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  watchOptions: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    poll: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="info-verbosity" tabindex="-1">info-verbosity <a class="header-anchor" href="#info-verbosity" aria-label="Permalink to &quot;info-verbosity&quot;">​</a></h3><p>这是一个命令行选项，只能在命令行运行，用来控制监听时的日志显示。</p><p>它的选项可以是 none, verbose, info。比如下面的命令就表示不输出相关的日志信息：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">webpack</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --watch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --info-verbosity</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> none</span></span></code></pre></div>`,23)]))}const E=a(t,[["render",h]]);export{c as __pageData,E as default};
