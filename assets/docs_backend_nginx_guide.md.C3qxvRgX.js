import{_ as e,c as n,o as i,ae as s}from"./chunks/framework.CLNW5JS9.js";const t="/blog/assets/nginx-hello.BbQ-A3DL.png",b=JSON.parse('{"title":"Hello Nginx","description":"","frontmatter":{},"headers":[],"relativePath":"docs/backend/nginx/guide.md","filePath":"docs/backend/nginx/guide.md"}'),l={name:"docs/backend/nginx/guide.md"};function o(p,a,d,h,c,r){return i(),n("div",null,a[0]||(a[0]=[s(`<h1 id="hello-nginx" tabindex="-1">Hello Nginx <a class="header-anchor" href="#hello-nginx" aria-label="Permalink to &quot;Hello Nginx&quot;">​</a></h1><h2 id="什么是-nginx" tabindex="-1">什么是 Nginx <a class="header-anchor" href="#什么是-nginx" aria-label="Permalink to &quot;什么是 Nginx&quot;">​</a></h2><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><p>在 Mac OS 中，使用 <code>brew</code> 安装非常简单</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>brew install nginx</span></span></code></pre></div><p>安装完成以后，nginx 会被自动的配置为环境变量，我们可以使用 <code>nginx -v</code> 来查看当前安装 nginx 的版本：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nginx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># nginx version: nginx/1.15.10</span></span></code></pre></div><h2 id="基本命令" tabindex="-1">基本命令 <a class="header-anchor" href="#基本命令" aria-label="Permalink to &quot;基本命令&quot;">​</a></h2><h3 id="启动-nginx" tabindex="-1">启动 nginx ： <a class="header-anchor" href="#启动-nginx" aria-label="Permalink to &quot;启动 nginx ：&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>nginx</span></span></code></pre></div><p>此时默认的会在本机的8080端口开启服务，打开 <a href="http://localhost:8080/" target="_blank" rel="noreferrer">http://localhost:8080/</a> 可以看到如下界面，证明运行成功：</p><p><img src="`+t+'" alt="hello nginx"></p><h3 id="关闭-nginx" tabindex="-1">关闭 nginx <a class="header-anchor" href="#关闭-nginx" aria-label="Permalink to &quot;关闭 nginx&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>nginx -s stop</span></span></code></pre></div><h3 id="重新加载" tabindex="-1">重新加载 <a class="header-anchor" href="#重新加载" aria-label="Permalink to &quot;重新加载&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>nginx -s reload</span></span></code></pre></div><p>一般我们在修改 nginx 配置文件修改后需要重新加载配置文件，让最新的修改生效。</p>',17)]))}const u=e(l,[["render",o]]);export{b as __pageData,u as default};
