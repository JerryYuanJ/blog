import{_ as o,c as d,o as c,ae as a}from"./chunks/framework.CLNW5JS9.js";const b=JSON.parse('{"title":"JS 实现大数相加","description":"","frontmatter":{},"headers":[],"relativePath":"docs/basic/js/add-big-number.md","filePath":"docs/basic/js/add-big-number.md"}'),t={name:"docs/basic/js/add-big-number.md"};function s(r,e,n,i,_,m){return c(),d("div",null,e[0]||(e[0]=[a('<h1 id="js-实现大数相加" tabindex="-1">JS 实现大数相加 <a class="header-anchor" href="#js-实现大数相加" aria-label="Permalink to &quot;JS 实现大数相加&quot;">​</a></h1><p>我们知道，在任何一门编程语言里，单纯的数字是有一个上限（下限）范围的。比如在我们的JS中，数字的最大值为<code>Number.MAX_VALUE</code>，即等于<code>1.7976931348623157e+308</code>。超过这个上限的操作，都会导致结果的不准确。可是如果非要计算两个超大的数字之和，是不是就没有办法了呢？</p><p>先来复习一下加法，比如我们要求<code>12</code>和<code>9</code>之和，我们会先加<code>2</code>和<code>9</code>，得到<code>11</code>，因为<code>11&gt;10</code>，所以个位等于<code>1</code>，<strong>往前进一位</strong>，此时我们的十位就是<code>1+1</code>等于<code>2</code>了，所以最终的结果等于<code>十位</code>加上（不是数值的加，是字符串形式的拼接）<code>个位</code>，即<code>21</code>。其实我们的大数相加的原理也是相同，再大的数也得乖乖的从个位开始加，所以，套用这个原理，我们可以很轻松的实现大数相加。</p>',3)]))}const l=o(t,[["render",s]]);export{b as __pageData,l as default};
